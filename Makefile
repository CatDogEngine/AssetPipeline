# Alternative GNU Make workspace makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

ifeq ($(config),debug)
  AutoMake_config = debug
  assimp_config = debug
  zlibstatic_config = debug
  AssetPipelineCore_config = debug
  CDProducer_config = debug
  GenericProducer_config = debug
  TerrainProducer_config = debug
  CDConsumer_config = debug
  CatDogToCatDog_config = debug
  ConvertGenericToCatDog_config = debug
  GenerateTerrainToCatDog_config = debug
  GenericToUVMap_config = debug

else ifeq ($(config),release)
  AutoMake_config = release
  assimp_config = release
  zlibstatic_config = release
  AssetPipelineCore_config = release
  CDProducer_config = release
  GenericProducer_config = release
  TerrainProducer_config = release
  CDConsumer_config = release
  CatDogToCatDog_config = release
  ConvertGenericToCatDog_config = release
  GenerateTerrainToCatDog_config = release
  GenericToUVMap_config = release

else
  $(error "invalid configuration $(config)")
endif

PROJECTS := AutoMake assimp zlibstatic AssetPipelineCore CDProducer GenericProducer TerrainProducer CDConsumer CatDogToCatDog ConvertGenericToCatDog GenerateTerrainToCatDog GenericToUVMap

.PHONY: all clean help $(PROJECTS) Build Consumers Examples Producers ThirdParty ThirdParty/assimp

all: $(PROJECTS)

Build: AutoMake

Consumers: CDConsumer

Examples: CatDogToCatDog ConvertGenericToCatDog GenerateTerrainToCatDog GenericToUVMap

Producers: CDProducer GenericProducer TerrainProducer

ThirdParty: ThirdParty/assimp

ThirdParty/assimp: assimp zlibstatic

AutoMake:
ifneq (,$(AutoMake_config))
	@echo "==== Building AutoMake ($(AutoMake_config)) ===="
	@${MAKE} --no-print-directory -C build -f AutoMake.make config=$(AutoMake_config)
endif

assimp: zlibstatic
ifneq (,$(assimp_config))
	@echo "==== Building assimp ($(assimp_config)) ===="
	@${MAKE} --no-print-directory -C build/assimp/code -f Makefile config=$(assimp_config)
endif

zlibstatic:
ifneq (,$(zlibstatic_config))
	@echo "==== Building zlibstatic ($(zlibstatic_config)) ===="
	@${MAKE} --no-print-directory -C build/assimp/contrib/zlib -f Makefile config=$(zlibstatic_config)
endif

AssetPipelineCore:
ifneq (,$(AssetPipelineCore_config))
	@echo "==== Building AssetPipelineCore ($(AssetPipelineCore_config)) ===="
	@${MAKE} --no-print-directory -C build -f AssetPipelineCore.make config=$(AssetPipelineCore_config)
endif

CDProducer: AssetPipelineCore
ifneq (,$(CDProducer_config))
	@echo "==== Building CDProducer ($(CDProducer_config)) ===="
	@${MAKE} --no-print-directory -C build -f CDProducer.make config=$(CDProducer_config)
endif

GenericProducer: AssetPipelineCore assimp
ifneq (,$(GenericProducer_config))
	@echo "==== Building GenericProducer ($(GenericProducer_config)) ===="
	@${MAKE} --no-print-directory -C build -f GenericProducer.make config=$(GenericProducer_config)
endif

TerrainProducer: AssetPipelineCore
ifneq (,$(TerrainProducer_config))
	@echo "==== Building TerrainProducer ($(TerrainProducer_config)) ===="
	@${MAKE} --no-print-directory -C build -f TerrainProducer.make config=$(TerrainProducer_config)
endif

CDConsumer: AssetPipelineCore
ifneq (,$(CDConsumer_config))
	@echo "==== Building CDConsumer ($(CDConsumer_config)) ===="
	@${MAKE} --no-print-directory -C build -f CDConsumer.make config=$(CDConsumer_config)
endif

CatDogToCatDog: AssetPipelineCore CDProducer CDConsumer
ifneq (,$(CatDogToCatDog_config))
	@echo "==== Building CatDogToCatDog ($(CatDogToCatDog_config)) ===="
	@${MAKE} --no-print-directory -C build -f CatDogToCatDog.make config=$(CatDogToCatDog_config)
endif

ConvertGenericToCatDog: AssetPipelineCore CDConsumer GenericProducer
ifneq (,$(ConvertGenericToCatDog_config))
	@echo "==== Building ConvertGenericToCatDog ($(ConvertGenericToCatDog_config)) ===="
	@${MAKE} --no-print-directory -C build -f ConvertGenericToCatDog.make config=$(ConvertGenericToCatDog_config)
endif

GenerateTerrainToCatDog: AssetPipelineCore CDConsumer TerrainProducer
ifneq (,$(GenerateTerrainToCatDog_config))
	@echo "==== Building GenerateTerrainToCatDog ($(GenerateTerrainToCatDog_config)) ===="
	@${MAKE} --no-print-directory -C build -f GenerateTerrainToCatDog.make config=$(GenerateTerrainToCatDog_config)
endif

GenericToUVMap: AssetPipelineCore GenericProducer
ifneq (,$(GenericToUVMap_config))
	@echo "==== Building GenericToUVMap ($(GenericToUVMap_config)) ===="
	@${MAKE} --no-print-directory -C build -f GenericToUVMap.make config=$(GenericToUVMap_config)
endif

clean:
	@${MAKE} --no-print-directory -C build -f AutoMake.make clean
	@${MAKE} --no-print-directory -C build/assimp/code -f Makefile clean
	@${MAKE} --no-print-directory -C build/assimp/contrib/zlib -f Makefile clean
	@${MAKE} --no-print-directory -C build -f AssetPipelineCore.make clean
	@${MAKE} --no-print-directory -C build -f CDProducer.make clean
	@${MAKE} --no-print-directory -C build -f GenericProducer.make clean
	@${MAKE} --no-print-directory -C build -f TerrainProducer.make clean
	@${MAKE} --no-print-directory -C build -f CDConsumer.make clean
	@${MAKE} --no-print-directory -C build -f CatDogToCatDog.make clean
	@${MAKE} --no-print-directory -C build -f ConvertGenericToCatDog.make clean
	@${MAKE} --no-print-directory -C build -f GenerateTerrainToCatDog.make clean
	@${MAKE} --no-print-directory -C build -f GenericToUVMap.make clean

help:
	@echo "Usage: make [config=name] [target]"
	@echo ""
	@echo "CONFIGURATIONS:"
	@echo "  debug"
	@echo "  release"
	@echo ""
	@echo "TARGETS:"
	@echo "   all (default)"
	@echo "   clean"
	@echo "   AutoMake"
	@echo "   assimp"
	@echo "   zlibstatic"
	@echo "   AssetPipelineCore"
	@echo "   CDProducer"
	@echo "   GenericProducer"
	@echo "   TerrainProducer"
	@echo "   CDConsumer"
	@echo "   CatDogToCatDog"
	@echo "   ConvertGenericToCatDog"
	@echo "   GenerateTerrainToCatDog"
	@echo "   GenericToUVMap"
	@echo ""
	@echo "For more information, see https://github.com/premake/premake-core/wiki"